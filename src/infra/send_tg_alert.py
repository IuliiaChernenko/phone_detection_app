import requests
from datetime import datetime
from io import BytesIO
import cv2
import logging

logging.basicConfig(level=logging.CRITICAL+1, format='%(asctime)s %(levelname)s:%(message)s')
logger = logging.getLogger(__name__)

BOT_TOKEN = "8024143683:AAEIdfSrzRQW9qfUA0-BaDNAUnwuFf3VQHc"
ALL_CHAT_IDS = [-1002539322922]     # –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ CRITICAL –∏ RECOVERY
ADMIN_CHAT_IDS = [-1002539322922]              # –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ WARNING

# notification_async.py
from concurrent.futures import ThreadPoolExecutor, Future
import traceback
import logging

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
_NOTIFICATION_POOL = ThreadPoolExecutor(max_workers=2)  # 2 –ø–æ—Ç–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ

def notify_async(*args, **kwargs) -> Future:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ —á–µ—Ä–µ–∑ ThreadPoolExecutor.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Future, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ—à–∏–±–∫–∏).
    """
    def safe_notify():
        try:
            send_notification(*args, **kwargs)
        except Exception:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n%s", traceback.format_exc())

    return _NOTIFICATION_POOL.submit(safe_notify)


def escape_markdown(text: str) -> str:
    # escape_chars = r'\_*[]()~`>#+-=|{}.!'
    escape_chars = r'\_*[]()~`>#+=|{}.!'
    return ''.join(f'\\{c}' if c in escape_chars else c for c in text)


def send_notification(recipients, status, message_text, username, pc_name: str, images, timestamp, data_dict):
    status_tags = {'CRITICAL': 'üõë', 'WARNING': '‚ö†Ô∏è', 'RECOVERY': '‚úÖ'}
    tag = status_tags.get(status, '‚ÑπÔ∏è')

    if isinstance(timestamp, datetime):
        timestamp_str = timestamp.strftime('%Y-%m-%d %H:%M:%S')
    else:
        timestamp_str = str(timestamp)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    data_lines = "\n".join(f"{k}: {v}" for k, v in data_dict.items())
    text = (
        f"{tag} *{status}*\n"
        f"*–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞*: {escape_markdown(pc_name)}\n"
        f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {escape_markdown(username)}\n"
        f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {escape_markdown(message_text)}\n"
        f"*–í—Ä–µ–º—è:* {escape_markdown(timestamp_str)}\n"
        f"*–î–∞–Ω–Ω—ã–µ:*\n{escape_markdown(data_lines)}"
    )

    # # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    # if status == 'CRITICAL':
    #     recipients = ALL_CHAT_IDS
    # elif status == 'WARNING':
    #     recipients = ADMIN_CHAT_IDS
    # elif status == 'RECOVERY':
    #     recipients = ALL_CHAT_IDS
    # else:
    #     recipients = ADMIN_CHAT_IDS

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for chat_id in recipients:
        response = requests.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
            json={
                'chat_id': chat_id,
                'text': text,
                'parse_mode': 'Markdown'
            }
        )
        if not response.ok:
            logger.warning(f"[–û—à–∏–±–∫–∞] –¢–µ–∫—Å—Ç –≤ {chat_id}: {response.text}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for img in images:
        success, encoded_image = cv2.imencode('.jpg', img)
        if not success:
            logger.warning("[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            continue
        img_bytes = BytesIO(encoded_image.tobytes())

        for chat_id in recipients:
            img_bytes.seek(0)
            response = requests.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto",
                data={'chat_id': chat_id},
                files={'photo': ('image.jpg', img_bytes, 'image/jpeg')}
            )
            if not response.ok:
                logger.warning(f"[–û—à–∏–±–∫–∞] –ö–∞—Ä—Ç–∏–Ω–∫–∞ –≤ {chat_id}: {response.text}")
        img_bytes.close()


if __name__ == "__main__":
    img = cv2.imread(r"D:\start_point\projects\phone_detection_app\logs\2025-04-30_20-13-38_phone_detected_screen.jpg")[:,:,::-1]
    
    send_notification(
        "CRITICAL",
        "test critical alert",
        "custom username",
        "custom pc name",
        [img, img],
        "—ç—Ç–æ –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è",
        {"info": "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–∞, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è"})
